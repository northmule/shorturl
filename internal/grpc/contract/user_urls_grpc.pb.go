// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: internal/grpc/proto/user_urls.proto

package contract

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserUrlsHandler_View_FullMethodName   = "/contract.UserUrlsHandler/View"
	UserUrlsHandler_Delete_FullMethodName = "/contract.UserUrlsHandler/Delete"
)

// UserUrlsHandlerClient is the client API for UserUrlsHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserUrlsHandlerClient interface {
	View(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ViewResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type userUrlsHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserUrlsHandlerClient(cc grpc.ClientConnInterface) UserUrlsHandlerClient {
	return &userUrlsHandlerClient{cc}
}

func (c *userUrlsHandlerClient) View(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewResponse)
	err := c.cc.Invoke(ctx, UserUrlsHandler_View_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUrlsHandlerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, UserUrlsHandler_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserUrlsHandlerServer is the server API for UserUrlsHandler service.
// All implementations must embed UnimplementedUserUrlsHandlerServer
// for forward compatibility.
type UserUrlsHandlerServer interface {
	View(context.Context, *empty.Empty) (*ViewResponse, error)
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	mustEmbedUnimplementedUserUrlsHandlerServer()
}

// UnimplementedUserUrlsHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserUrlsHandlerServer struct{}

func (UnimplementedUserUrlsHandlerServer) View(context.Context, *empty.Empty) (*ViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedUserUrlsHandlerServer) Delete(context.Context, *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserUrlsHandlerServer) mustEmbedUnimplementedUserUrlsHandlerServer() {}
func (UnimplementedUserUrlsHandlerServer) testEmbeddedByValue()                         {}

// UnsafeUserUrlsHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserUrlsHandlerServer will
// result in compilation errors.
type UnsafeUserUrlsHandlerServer interface {
	mustEmbedUnimplementedUserUrlsHandlerServer()
}

func RegisterUserUrlsHandlerServer(s grpc.ServiceRegistrar, srv UserUrlsHandlerServer) {
	// If the following call pancis, it indicates UnimplementedUserUrlsHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserUrlsHandler_ServiceDesc, srv)
}

func _UserUrlsHandler_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUrlsHandlerServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserUrlsHandler_View_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUrlsHandlerServer).View(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUrlsHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUrlsHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserUrlsHandler_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUrlsHandlerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserUrlsHandler_ServiceDesc is the grpc.ServiceDesc for UserUrlsHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserUrlsHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contract.UserUrlsHandler",
	HandlerType: (*UserUrlsHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "View",
			Handler:    _UserUrlsHandler_View_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserUrlsHandler_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/proto/user_urls.proto",
}
