// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: shorturl/shortener.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortenerHandler_Shortener_FullMethodName      = "/contract.ShortenerHandler/Shortener"
	ShortenerHandler_ShortenerJSON_FullMethodName  = "/contract.ShortenerHandler/ShortenerJSON"
	ShortenerHandler_ShortenerBatch_FullMethodName = "/contract.ShortenerHandler/ShortenerBatch"
)

// ShortenerHandlerClient is the client API for ShortenerHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerHandlerClient interface {
	Shortener(ctx context.Context, in *ShortenerRequest, opts ...grpc.CallOption) (*ShortenerResponse, error)
	ShortenerJSON(ctx context.Context, in *ShortenerJSONRequest, opts ...grpc.CallOption) (*ShortenerJSONResponse, error)
	ShortenerBatch(ctx context.Context, in *ShortenerBatchRequest, opts ...grpc.CallOption) (*ShortenerBatchResponse, error)
}

type shortenerHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerHandlerClient(cc grpc.ClientConnInterface) ShortenerHandlerClient {
	return &shortenerHandlerClient{cc}
}

func (c *shortenerHandlerClient) Shortener(ctx context.Context, in *ShortenerRequest, opts ...grpc.CallOption) (*ShortenerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenerResponse)
	err := c.cc.Invoke(ctx, ShortenerHandler_Shortener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerHandlerClient) ShortenerJSON(ctx context.Context, in *ShortenerJSONRequest, opts ...grpc.CallOption) (*ShortenerJSONResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenerJSONResponse)
	err := c.cc.Invoke(ctx, ShortenerHandler_ShortenerJSON_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerHandlerClient) ShortenerBatch(ctx context.Context, in *ShortenerBatchRequest, opts ...grpc.CallOption) (*ShortenerBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenerBatchResponse)
	err := c.cc.Invoke(ctx, ShortenerHandler_ShortenerBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerHandlerServer is the server API for ShortenerHandler service.
// All implementations must embed UnimplementedShortenerHandlerServer
// for forward compatibility.
type ShortenerHandlerServer interface {
	Shortener(context.Context, *ShortenerRequest) (*ShortenerResponse, error)
	ShortenerJSON(context.Context, *ShortenerJSONRequest) (*ShortenerJSONResponse, error)
	ShortenerBatch(context.Context, *ShortenerBatchRequest) (*ShortenerBatchResponse, error)
	mustEmbedUnimplementedShortenerHandlerServer()
}

// UnimplementedShortenerHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortenerHandlerServer struct{}

func (UnimplementedShortenerHandlerServer) Shortener(context.Context, *ShortenerRequest) (*ShortenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shortener not implemented")
}
func (UnimplementedShortenerHandlerServer) ShortenerJSON(context.Context, *ShortenerJSONRequest) (*ShortenerJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenerJSON not implemented")
}
func (UnimplementedShortenerHandlerServer) ShortenerBatch(context.Context, *ShortenerBatchRequest) (*ShortenerBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenerBatch not implemented")
}
func (UnimplementedShortenerHandlerServer) mustEmbedUnimplementedShortenerHandlerServer() {}
func (UnimplementedShortenerHandlerServer) testEmbeddedByValue()                          {}

// UnsafeShortenerHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerHandlerServer will
// result in compilation errors.
type UnsafeShortenerHandlerServer interface {
	mustEmbedUnimplementedShortenerHandlerServer()
}

func RegisterShortenerHandlerServer(s grpc.ServiceRegistrar, srv ShortenerHandlerServer) {
	// If the following call pancis, it indicates UnimplementedShortenerHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortenerHandler_ServiceDesc, srv)
}

func _ShortenerHandler_Shortener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerHandlerServer).Shortener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerHandler_Shortener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerHandlerServer).Shortener(ctx, req.(*ShortenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerHandler_ShortenerJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenerJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerHandlerServer).ShortenerJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerHandler_ShortenerJSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerHandlerServer).ShortenerJSON(ctx, req.(*ShortenerJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerHandler_ShortenerBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenerBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerHandlerServer).ShortenerBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerHandler_ShortenerBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerHandlerServer).ShortenerBatch(ctx, req.(*ShortenerBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerHandler_ServiceDesc is the grpc.ServiceDesc for ShortenerHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contract.ShortenerHandler",
	HandlerType: (*ShortenerHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shortener",
			Handler:    _ShortenerHandler_Shortener_Handler,
		},
		{
			MethodName: "ShortenerJSON",
			Handler:    _ShortenerHandler_ShortenerJSON_Handler,
		},
		{
			MethodName: "ShortenerBatch",
			Handler:    _ShortenerHandler_ShortenerBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shorturl/shortener.proto",
}
